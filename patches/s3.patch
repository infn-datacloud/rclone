--- rclone/backend/s3/s3.go	2023-05-28 21:12:56.316871036 +0200
+++ backend/s3/s3.go	2023-05-28 17:48:49.134096752 +0200
@@ -6,11 +6,15 @@
 	"context"
 	"crypto/md5"
 	"crypto/tls"
+	"fmt"
+	"strings"
+	"time"
+
 	"encoding/base64"
 	"encoding/hex"
 	"encoding/xml"
-	"errors"
-	"fmt"
+
+	// "fmt" // Declared in authMinio.go
 	"io"
 	"net/http"
 	"net/url"
@@ -18,9 +22,10 @@
 	"regexp"
 	"sort"
 	"strconv"
-	"strings"
+
+	// "strings" // Declared in authMinio.go
 	"sync"
-	"time"
+	// "time" // Declared in authMinio.go
 
 	"github.com/aws/aws-sdk-go/aws"
 	"github.com/aws/aws-sdk-go/aws/awserr"
@@ -34,6 +39,7 @@
 	"github.com/aws/aws-sdk-go/aws/session"
 	"github.com/aws/aws-sdk-go/service/s3"
 	"github.com/ncw/swift/v2"
+	"github.com/pkg/errors"
 	"github.com/rclone/rclone/fs"
 	"github.com/rclone/rclone/fs/config"
 	"github.com/rclone/rclone/fs/config/configmap"
@@ -58,14 +64,12 @@
 func init() {
 	fs.Register(&fs.RegInfo{
 		Name:        "s3",
-		Description: "Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, China Mobile, Digital Ocean, Dreamhost, IBM COS, Lyve Cloud, Minio, Netease, RackCorp, Scaleway, SeaweedFS, StackPath, Storj, Tencent COS and Wasabi",
+		Description: "Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, INFN Cloud, Minio, SeaweedFS, and Tencent COS",
 		NewFs:       NewFs,
 		CommandHelp: commandHelp,
 		Options: []fs.Option{{
 			Name: fs.ConfigProvider,
 			Help: "Choose your S3 provider.",
-			// NB if you add a new provider here, then add it in the
-			// setQuirks function and set the correct quirks
 			Examples: []fs.OptionExample{{
 				Value: "AWS",
 				Help:  "Amazon Web Services (AWS) S3",
@@ -76,9 +80,6 @@
 				Value: "Ceph",
 				Help:  "Ceph Object Storage",
 			}, {
-				Value: "ChinaMobile",
-				Help:  "China Mobile Ecloud Elastic Object Storage (EOS)",
-			}, {
 				Value: "DigitalOcean",
 				Help:  "Digital Ocean Spaces",
 			}, {
@@ -88,8 +89,8 @@
 				Value: "IBMCOS",
 				Help:  "IBM COS S3",
 			}, {
-				Value: "LyveCloud",
-				Help:  "Seagate Lyve Cloud",
+				Value: "INFN Cloud",
+				Help:  "INFN Cloud S3 with STS IAM",
 			}, {
 				Value: "Minio",
 				Help:  "Minio Object Storage",
@@ -97,9 +98,6 @@
 				Value: "Netease",
 				Help:  "Netease Object Storage (NOS)",
 			}, {
-				Value: "RackCorp",
-				Help:  "RackCorp Object Storage",
-			}, {
 				Value: "Scaleway",
 				Help:  "Scaleway Object Storage",
 			}, {
@@ -109,9 +107,6 @@
 				Value: "StackPath",
 				Help:  "StackPath Object Storage",
 			}, {
-				Value: "Storj",
-				Help:  "Storj (S3 Compatible Gateway)",
-			}, {
 				Value: "TencentCOS",
 				Help:  "Tencent Cloud Object Storage (COS)",
 			}, {
@@ -123,21 +118,44 @@
 			}},
 		}, {
 			Name:    "env_auth",
-			Help:    "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).\n\nOnly applies if access_key_id and secret_access_key is blank.",
+			Help:    "Get AWS credentials from runtime (environment variables or EC2/ECS meta data if no env vars).\nOnly applies if access_key_id and secret_access_key is blank.",
 			Default: false,
 			Examples: []fs.OptionExample{{
 				Value: "false",
-				Help:  "Enter AWS credentials in the next step.",
+				Help:  "Enter AWS credentials in the next step",
 			}, {
 				Value: "true",
-				Help:  "Get AWS credentials from the environment (env vars or IAM).",
+				Help:  "Get AWS credentials from the environment (env vars or IAM)",
 			}},
 		}, {
+			Name:     "account",
+			Help:     "Get oidc-agent account name",
+			Default:  "",
+			Provider: "INFN Cloud",
+			Examples: []fs.OptionExample{{
+				Value: "NAME",
+				Help:  "If you can get the token with: oidc-token NAME",
+			},
+			},
+		}, {
+			Name:     "oidc_agent",
+			Help:     "Use oidc-agent to manage credentials",
+			Default:  false,
+			Provider: "INFN Cloud",
+			Examples: []fs.OptionExample{{
+				Value: "false",
+				Help:  "If you do not want to use oidc-agent mechanism",
+			}, {
+				Value: "true",
+				Help:  "If you want to use oidc-agent mechanism",
+			},
+			},
+		}, {
 			Name: "access_key_id",
-			Help: "AWS Access Key ID.\n\nLeave blank for anonymous access or runtime credentials.",
+			Help: "AWS Access Key ID.\nLeave blank for anonymous access or runtime credentials.",
 		}, {
 			Name: "secret_access_key",
-			Help: "AWS Secret Access Key (password).\n\nLeave blank for anonymous access or runtime credentials.",
+			Help: "AWS Secret Access Key (password)\nLeave blank for anonymous access or runtime credentials.",
 		}, {
 			// References:
 			// 1. https://docs.aws.amazon.com/general/latest/gr/rande.html
@@ -150,138 +168,76 @@
 				Help:  "The default endpoint - a good choice if you are unsure.\nUS Region, Northern Virginia, or Pacific Northwest.\nLeave location constraint empty.",
 			}, {
 				Value: "us-east-2",
-				Help:  "US East (Ohio) Region.\nNeeds location constraint us-east-2.",
+				Help:  "US East (Ohio) Region\nNeeds location constraint us-east-2.",
 			}, {
 				Value: "us-west-1",
-				Help:  "US West (Northern California) Region.\nNeeds location constraint us-west-1.",
+				Help:  "US West (Northern California) Region\nNeeds location constraint us-west-1.",
 			}, {
 				Value: "us-west-2",
-				Help:  "US West (Oregon) Region.\nNeeds location constraint us-west-2.",
+				Help:  "US West (Oregon) Region\nNeeds location constraint us-west-2.",
 			}, {
 				Value: "ca-central-1",
-				Help:  "Canada (Central) Region.\nNeeds location constraint ca-central-1.",
+				Help:  "Canada (Central) Region\nNeeds location constraint ca-central-1.",
 			}, {
 				Value: "eu-west-1",
-				Help:  "EU (Ireland) Region.\nNeeds location constraint EU or eu-west-1.",
+				Help:  "EU (Ireland) Region\nNeeds location constraint EU or eu-west-1.",
 			}, {
 				Value: "eu-west-2",
-				Help:  "EU (London) Region.\nNeeds location constraint eu-west-2.",
+				Help:  "EU (London) Region\nNeeds location constraint eu-west-2.",
 			}, {
 				Value: "eu-west-3",
-				Help:  "EU (Paris) Region.\nNeeds location constraint eu-west-3.",
+				Help:  "EU (Paris) Region\nNeeds location constraint eu-west-3.",
 			}, {
 				Value: "eu-north-1",
-				Help:  "EU (Stockholm) Region.\nNeeds location constraint eu-north-1.",
+				Help:  "EU (Stockholm) Region\nNeeds location constraint eu-north-1.",
 			}, {
 				Value: "eu-south-1",
-				Help:  "EU (Milan) Region.\nNeeds location constraint eu-south-1.",
+				Help:  "EU (Milan) Region\nNeeds location constraint eu-south-1.",
 			}, {
 				Value: "eu-central-1",
-				Help:  "EU (Frankfurt) Region.\nNeeds location constraint eu-central-1.",
+				Help:  "EU (Frankfurt) Region\nNeeds location constraint eu-central-1.",
 			}, {
 				Value: "ap-southeast-1",
-				Help:  "Asia Pacific (Singapore) Region.\nNeeds location constraint ap-southeast-1.",
+				Help:  "Asia Pacific (Singapore) Region\nNeeds location constraint ap-southeast-1.",
 			}, {
 				Value: "ap-southeast-2",
-				Help:  "Asia Pacific (Sydney) Region.\nNeeds location constraint ap-southeast-2.",
+				Help:  "Asia Pacific (Sydney) Region\nNeeds location constraint ap-southeast-2.",
 			}, {
 				Value: "ap-northeast-1",
-				Help:  "Asia Pacific (Tokyo) Region.\nNeeds location constraint ap-northeast-1.",
+				Help:  "Asia Pacific (Tokyo) Region\nNeeds location constraint ap-northeast-1.",
 			}, {
 				Value: "ap-northeast-2",
-				Help:  "Asia Pacific (Seoul).\nNeeds location constraint ap-northeast-2.",
+				Help:  "Asia Pacific (Seoul)\nNeeds location constraint ap-northeast-2.",
 			}, {
 				Value: "ap-northeast-3",
-				Help:  "Asia Pacific (Osaka-Local).\nNeeds location constraint ap-northeast-3.",
+				Help:  "Asia Pacific (Osaka-Local)\nNeeds location constraint ap-northeast-3.",
 			}, {
 				Value: "ap-south-1",
-				Help:  "Asia Pacific (Mumbai).\nNeeds location constraint ap-south-1.",
+				Help:  "Asia Pacific (Mumbai)\nNeeds location constraint ap-south-1.",
 			}, {
 				Value: "ap-east-1",
-				Help:  "Asia Pacific (Hong Kong) Region.\nNeeds location constraint ap-east-1.",
+				Help:  "Asia Pacific (Hong Kong) Region\nNeeds location constraint ap-east-1.",
 			}, {
 				Value: "sa-east-1",
-				Help:  "South America (Sao Paulo) Region.\nNeeds location constraint sa-east-1.",
+				Help:  "South America (Sao Paulo) Region\nNeeds location constraint sa-east-1.",
 			}, {
 				Value: "me-south-1",
-				Help:  "Middle East (Bahrain) Region.\nNeeds location constraint me-south-1.",
+				Help:  "Middle East (Bahrain) Region\nNeeds location constraint me-south-1.",
 			}, {
 				Value: "af-south-1",
-				Help:  "Africa (Cape Town) Region.\nNeeds location constraint af-south-1.",
+				Help:  "Africa (Cape Town) Region\nNeeds location constraint af-south-1.",
 			}, {
 				Value: "cn-north-1",
-				Help:  "China (Beijing) Region.\nNeeds location constraint cn-north-1.",
+				Help:  "China (Beijing) Region\nNeeds location constraint cn-north-1.",
 			}, {
 				Value: "cn-northwest-1",
-				Help:  "China (Ningxia) Region.\nNeeds location constraint cn-northwest-1.",
+				Help:  "China (Ningxia) Region\nNeeds location constraint cn-northwest-1.",
 			}, {
 				Value: "us-gov-east-1",
-				Help:  "AWS GovCloud (US-East) Region.\nNeeds location constraint us-gov-east-1.",
+				Help:  "AWS GovCloud (US-East) Region\nNeeds location constraint us-gov-east-1.",
 			}, {
 				Value: "us-gov-west-1",
-				Help:  "AWS GovCloud (US) Region.\nNeeds location constraint us-gov-west-1.",
-			}},
-		}, {
-			Name:     "region",
-			Help:     "region - the location where your bucket will be created and your data stored.\n",
-			Provider: "RackCorp",
-			Examples: []fs.OptionExample{{
-				Value: "global",
-				Help:  "Global CDN (All locations) Region",
-			}, {
-				Value: "au",
-				Help:  "Australia (All states)",
-			}, {
-				Value: "au-nsw",
-				Help:  "NSW (Australia) Region",
-			}, {
-				Value: "au-qld",
-				Help:  "QLD (Australia) Region",
-			}, {
-				Value: "au-vic",
-				Help:  "VIC (Australia) Region",
-			}, {
-				Value: "au-wa",
-				Help:  "Perth (Australia) Region",
-			}, {
-				Value: "ph",
-				Help:  "Manila (Philippines) Region",
-			}, {
-				Value: "th",
-				Help:  "Bangkok (Thailand) Region",
-			}, {
-				Value: "hk",
-				Help:  "HK (Hong Kong) Region",
-			}, {
-				Value: "mn",
-				Help:  "Ulaanbaatar (Mongolia) Region",
-			}, {
-				Value: "kg",
-				Help:  "Bishkek (Kyrgyzstan) Region",
-			}, {
-				Value: "id",
-				Help:  "Jakarta (Indonesia) Region",
-			}, {
-				Value: "jp",
-				Help:  "Tokyo (Japan) Region",
-			}, {
-				Value: "sg",
-				Help:  "SG (Singapore) Region",
-			}, {
-				Value: "de",
-				Help:  "Frankfurt (Germany) Region",
-			}, {
-				Value: "us",
-				Help:  "USA (AnyCast) Region",
-			}, {
-				Value: "us-east-1",
-				Help:  "New York (USA) Region",
-			}, {
-				Value: "us-west-1",
-				Help:  "Freemont (USA) Region",
-			}, {
-				Value: "nz",
-				Help:  "Auckland (New Zealand) Region",
+				Help:  "AWS GovCloud (US) Region\nNeeds location constraint us-gov-west-1.",
 			}},
 		}, {
 			Name:     "region",
@@ -296,118 +252,22 @@
 			}},
 		}, {
 			Name:     "region",
-			Help:     "Region to connect to.\n\nLeave blank if you are using an S3 clone and you don't have a region.",
-			Provider: "!AWS,Alibaba,ChinaMobile,RackCorp,Scaleway,Storj,TencentCOS",
+			Help:     "Region to connect to.\nLeave blank if you are using an S3 clone and you don't have a region.",
+			Provider: "!AWS,Alibaba,Scaleway,TencentCOS",
 			Examples: []fs.OptionExample{{
 				Value: "",
-				Help:  "Use this if unsure.\nWill use v4 signatures and an empty region.",
+				Help:  "Use this if unsure. Will use v4 signatures and an empty region.",
 			}, {
 				Value: "other-v2-signature",
-				Help:  "Use this only if v4 signatures don't work.\nE.g. pre Jewel/v10 CEPH.",
+				Help:  "Use this only if v4 signatures don't work, e.g. pre Jewel/v10 CEPH.",
 			}},
 		}, {
 			Name:     "endpoint",
-			Help:     "Endpoint for S3 API.\n\nLeave blank if using AWS to use the default endpoint for the region.",
+			Help:     "Endpoint for S3 API.\nLeave blank if using AWS to use the default endpoint for the region.",
 			Provider: "AWS",
 		}, {
-			// ChinaMobile endpoints: https://ecloud.10086.cn/op-help-center/doc/article/24534
-			Name:     "endpoint",
-			Help:     "Endpoint for China Mobile Ecloud Elastic Object Storage (EOS) API.",
-			Provider: "ChinaMobile",
-			Examples: []fs.OptionExample{{
-				Value: "eos-wuxi-1.cmecloud.cn",
-				Help:  "The default endpoint - a good choice if you are unsure.\nEast China (Suzhou)",
-			}, {
-				Value: "eos-jinan-1.cmecloud.cn",
-				Help:  "East China (Jinan)",
-			}, {
-				Value: "eos-ningbo-1.cmecloud.cn",
-				Help:  "East China (Hangzhou)",
-			}, {
-				Value: "eos-shanghai-1.cmecloud.cn",
-				Help:  "East China (Shanghai-1)",
-			}, {
-				Value: "eos-zhengzhou-1.cmecloud.cn",
-				Help:  "Central China (Zhengzhou)",
-			}, {
-				Value: "eos-hunan-1.cmecloud.cn",
-				Help:  "Central China (Changsha-1)",
-			}, {
-				Value: "eos-zhuzhou-1.cmecloud.cn",
-				Help:  "Central China (Changsha-2)",
-			}, {
-				Value: "eos-guangzhou-1.cmecloud.cn",
-				Help:  "South China (Guangzhou-2)",
-			}, {
-				Value: "eos-dongguan-1.cmecloud.cn",
-				Help:  "South China (Guangzhou-3)",
-			}, {
-				Value: "eos-beijing-1.cmecloud.cn",
-				Help:  "North China (Beijing-1)",
-			}, {
-				Value: "eos-beijing-2.cmecloud.cn",
-				Help:  "North China (Beijing-2)",
-			}, {
-				Value: "eos-beijing-4.cmecloud.cn",
-				Help:  "North China (Beijing-3)",
-			}, {
-				Value: "eos-huhehaote-1.cmecloud.cn",
-				Help:  "North China (Huhehaote)",
-			}, {
-				Value: "eos-chengdu-1.cmecloud.cn",
-				Help:  "Southwest China (Chengdu)",
-			}, {
-				Value: "eos-chongqing-1.cmecloud.cn",
-				Help:  "Southwest China (Chongqing)",
-			}, {
-				Value: "eos-guiyang-1.cmecloud.cn",
-				Help:  "Southwest China (Guiyang)",
-			}, {
-				Value: "eos-xian-1.cmecloud.cn",
-				Help:  "Nouthwest China (Xian)",
-			}, {
-				Value: "eos-yunnan.cmecloud.cn",
-				Help:  "Yunnan China (Kunming)",
-			}, {
-				Value: "eos-yunnan-2.cmecloud.cn",
-				Help:  "Yunnan China (Kunming-2)",
-			}, {
-				Value: "eos-tianjin-1.cmecloud.cn",
-				Help:  "Tianjin China (Tianjin)",
-			}, {
-				Value: "eos-jilin-1.cmecloud.cn",
-				Help:  "Jilin China (Changchun)",
-			}, {
-				Value: "eos-hubei-1.cmecloud.cn",
-				Help:  "Hubei China (Xiangyan)",
-			}, {
-				Value: "eos-jiangxi-1.cmecloud.cn",
-				Help:  "Jiangxi China (Nanchang)",
-			}, {
-				Value: "eos-gansu-1.cmecloud.cn",
-				Help:  "Gansu China (Lanzhou)",
-			}, {
-				Value: "eos-shanxi-1.cmecloud.cn",
-				Help:  "Shanxi China (Taiyuan)",
-			}, {
-				Value: "eos-liaoning-1.cmecloud.cn",
-				Help:  "Liaoning China (Shenyang)",
-			}, {
-				Value: "eos-hebei-1.cmecloud.cn",
-				Help:  "Hebei China (Shijiazhuang)",
-			}, {
-				Value: "eos-fujian-1.cmecloud.cn",
-				Help:  "Fujian China (Xiamen)",
-			}, {
-				Value: "eos-guangxi-1.cmecloud.cn",
-				Help:  "Guangxi China (Nanning)",
-			}, {
-				Value: "eos-anhui-1.cmecloud.cn",
-				Help:  "Anhui China (Huainan)",
-			}},
-		}, {
 			Name:     "endpoint",
-			Help:     "Endpoint for IBM COS S3 API.\n\nSpecify if using an IBM COS On Premise.",
+			Help:     "Endpoint for IBM COS S3 API.\nSpecify if using an IBM COS On Premise.",
 			Provider: "IBMCOS",
 			Examples: []fs.OptionExample{{
 				Value: "s3.us.cloud-object-storage.appdomain.cloud",
@@ -703,149 +563,72 @@
 				Help:  "EU Endpoint",
 			}},
 		}, {
-			Name:     "endpoint",
-			Help:     "Endpoint of the Shared Gateway.",
-			Provider: "Storj",
-			Examples: []fs.OptionExample{{
-				Value: "gateway.eu1.storjshare.io",
-				Help:  "EU1 Shared Gateway",
-			}, {
-				Value: "gateway.us1.storjshare.io",
-				Help:  "US1 Shared Gateway",
-			}, {
-				Value: "gateway.ap1.storjshare.io",
-				Help:  "Asia-Pacific Shared Gateway",
-			}},
-		}, {
 			// cos endpoints: https://intl.cloud.tencent.com/document/product/436/6224
 			Name:     "endpoint",
 			Help:     "Endpoint for Tencent COS API.",
 			Provider: "TencentCOS",
 			Examples: []fs.OptionExample{{
 				Value: "cos.ap-beijing.myqcloud.com",
-				Help:  "Beijing Region",
+				Help:  "Beijing Region.",
 			}, {
 				Value: "cos.ap-nanjing.myqcloud.com",
-				Help:  "Nanjing Region",
+				Help:  "Nanjing Region.",
 			}, {
 				Value: "cos.ap-shanghai.myqcloud.com",
-				Help:  "Shanghai Region",
+				Help:  "Shanghai Region.",
 			}, {
 				Value: "cos.ap-guangzhou.myqcloud.com",
-				Help:  "Guangzhou Region",
+				Help:  "Guangzhou Region.",
 			}, {
 				Value: "cos.ap-nanjing.myqcloud.com",
-				Help:  "Nanjing Region",
+				Help:  "Nanjing Region.",
 			}, {
 				Value: "cos.ap-chengdu.myqcloud.com",
-				Help:  "Chengdu Region",
+				Help:  "Chengdu Region.",
 			}, {
 				Value: "cos.ap-chongqing.myqcloud.com",
-				Help:  "Chongqing Region",
+				Help:  "Chongqing Region.",
 			}, {
 				Value: "cos.ap-hongkong.myqcloud.com",
-				Help:  "Hong Kong (China) Region",
+				Help:  "Hong Kong (China) Region.",
 			}, {
 				Value: "cos.ap-singapore.myqcloud.com",
-				Help:  "Singapore Region",
+				Help:  "Singapore Region.",
 			}, {
 				Value: "cos.ap-mumbai.myqcloud.com",
-				Help:  "Mumbai Region",
+				Help:  "Mumbai Region.",
 			}, {
 				Value: "cos.ap-seoul.myqcloud.com",
-				Help:  "Seoul Region",
+				Help:  "Seoul Region.",
 			}, {
 				Value: "cos.ap-bangkok.myqcloud.com",
-				Help:  "Bangkok Region",
+				Help:  "Bangkok Region.",
 			}, {
 				Value: "cos.ap-tokyo.myqcloud.com",
-				Help:  "Tokyo Region",
+				Help:  "Tokyo Region.",
 			}, {
 				Value: "cos.na-siliconvalley.myqcloud.com",
-				Help:  "Silicon Valley Region",
+				Help:  "Silicon Valley Region.",
 			}, {
 				Value: "cos.na-ashburn.myqcloud.com",
-				Help:  "Virginia Region",
+				Help:  "Virginia Region.",
 			}, {
 				Value: "cos.na-toronto.myqcloud.com",
-				Help:  "Toronto Region",
+				Help:  "Toronto Region.",
 			}, {
 				Value: "cos.eu-frankfurt.myqcloud.com",
-				Help:  "Frankfurt Region",
+				Help:  "Frankfurt Region.",
 			}, {
 				Value: "cos.eu-moscow.myqcloud.com",
-				Help:  "Moscow Region",
+				Help:  "Moscow Region.",
 			}, {
 				Value: "cos.accelerate.myqcloud.com",
-				Help:  "Use Tencent COS Accelerate Endpoint",
+				Help:  "Use Tencent COS Accelerate Endpoint.",
 			}},
 		}, {
-			// RackCorp endpoints: https://www.rackcorp.com/storage/s3storage
 			Name:     "endpoint",
-			Help:     "Endpoint for RackCorp Object Storage.",
-			Provider: "RackCorp",
-			Examples: []fs.OptionExample{{
-				Value: "s3.rackcorp.com",
-				Help:  "Global (AnyCast) Endpoint",
-			}, {
-				Value: "au.s3.rackcorp.com",
-				Help:  "Australia (Anycast) Endpoint",
-			}, {
-				Value: "au-nsw.s3.rackcorp.com",
-				Help:  "Sydney (Australia) Endpoint",
-			}, {
-				Value: "au-qld.s3.rackcorp.com",
-				Help:  "Brisbane (Australia) Endpoint",
-			}, {
-				Value: "au-vic.s3.rackcorp.com",
-				Help:  "Melbourne (Australia) Endpoint",
-			}, {
-				Value: "au-wa.s3.rackcorp.com",
-				Help:  "Perth (Australia) Endpoint",
-			}, {
-				Value: "ph.s3.rackcorp.com",
-				Help:  "Manila (Philippines) Endpoint",
-			}, {
-				Value: "th.s3.rackcorp.com",
-				Help:  "Bangkok (Thailand) Endpoint",
-			}, {
-				Value: "hk.s3.rackcorp.com",
-				Help:  "HK (Hong Kong) Endpoint",
-			}, {
-				Value: "mn.s3.rackcorp.com",
-				Help:  "Ulaanbaatar (Mongolia) Endpoint",
-			}, {
-				Value: "kg.s3.rackcorp.com",
-				Help:  "Bishkek (Kyrgyzstan) Endpoint",
-			}, {
-				Value: "id.s3.rackcorp.com",
-				Help:  "Jakarta (Indonesia) Endpoint",
-			}, {
-				Value: "jp.s3.rackcorp.com",
-				Help:  "Tokyo (Japan) Endpoint",
-			}, {
-				Value: "sg.s3.rackcorp.com",
-				Help:  "SG (Singapore) Endpoint",
-			}, {
-				Value: "de.s3.rackcorp.com",
-				Help:  "Frankfurt (Germany) Endpoint",
-			}, {
-				Value: "us.s3.rackcorp.com",
-				Help:  "USA (AnyCast) Endpoint",
-			}, {
-				Value: "us-east-1.s3.rackcorp.com",
-				Help:  "New York (USA) Endpoint",
-			}, {
-				Value: "us-west-1.s3.rackcorp.com",
-				Help:  "Freemont (USA) Endpoint",
-			}, {
-				Value: "nz.s3.rackcorp.com",
-				Help:  "Auckland (New Zealand) Endpoint",
-			}},
-		}, {
-			Name:     "endpoint",
-			Help:     "Endpoint for S3 API.\n\nRequired when using an S3 clone.",
-			Provider: "!AWS,IBMCOS,TencentCOS,Alibaba,ChinaMobile,Scaleway,StackPath,Storj,RackCorp",
+			Help:     "Endpoint for S3 API.\nRequired when using an S3 clone.",
+			Provider: "!AWS,IBMCOS,TencentCOS,Alibaba,Scaleway,StackPath",
 			Examples: []fs.OptionExample{{
 				Value:    "objects-us-east-1.dream.io",
 				Help:     "Dream Objects endpoint",
@@ -867,18 +650,6 @@
 				Help:     "SeaweedFS S3 localhost",
 				Provider: "SeaweedFS",
 			}, {
-				Value:    "s3.us-east-1.lyvecloud.seagate.com",
-				Help:     "Seagate Lyve Cloud US East 1 (Virginia)",
-				Provider: "LyveCloud",
-			}, {
-				Value:    "s3.us-west-1.lyvecloud.seagate.com",
-				Help:     "Seagate Lyve Cloud US West 1 (California)",
-				Provider: "LyveCloud",
-			}, {
-				Value:    "s3.ap-southeast-1.lyvecloud.seagate.com",
-				Help:     "Seagate Lyve Cloud AP Southeast 1 (Singapore)",
-				Provider: "LyveCloud",
-			}, {
 				Value:    "s3.wasabisys.com",
 				Help:     "Wasabi US East endpoint",
 				Provider: "Wasabi",
@@ -890,193 +661,90 @@
 				Value:    "s3.eu-central-1.wasabisys.com",
 				Help:     "Wasabi EU Central endpoint",
 				Provider: "Wasabi",
-			}, {
-				Value:    "s3.ap-northeast-1.wasabisys.com",
-				Help:     "Wasabi AP Northeast 1 (Tokyo) endpoint",
-				Provider: "Wasabi",
-			}, {
-				Value:    "s3.ap-northeast-2.wasabisys.com",
-				Help:     "Wasabi AP Northeast 2 (Osaka) endpoint",
-				Provider: "Wasabi",
 			}},
 		}, {
 			Name:     "location_constraint",
-			Help:     "Location constraint - must be set to match the Region.\n\nUsed when creating buckets only.",
+			Help:     "Location constraint - must be set to match the Region.\nUsed when creating buckets only.",
 			Provider: "AWS",
 			Examples: []fs.OptionExample{{
 				Value: "",
-				Help:  "Empty for US Region, Northern Virginia, or Pacific Northwest",
+				Help:  "Empty for US Region, Northern Virginia, or Pacific Northwest.",
 			}, {
 				Value: "us-east-2",
-				Help:  "US East (Ohio) Region",
+				Help:  "US East (Ohio) Region.",
 			}, {
 				Value: "us-west-1",
-				Help:  "US West (Northern California) Region",
+				Help:  "US West (Northern California) Region.",
 			}, {
 				Value: "us-west-2",
-				Help:  "US West (Oregon) Region",
+				Help:  "US West (Oregon) Region.",
 			}, {
 				Value: "ca-central-1",
-				Help:  "Canada (Central) Region",
+				Help:  "Canada (Central) Region.",
 			}, {
 				Value: "eu-west-1",
-				Help:  "EU (Ireland) Region",
+				Help:  "EU (Ireland) Region.",
 			}, {
 				Value: "eu-west-2",
-				Help:  "EU (London) Region",
+				Help:  "EU (London) Region.",
 			}, {
 				Value: "eu-west-3",
-				Help:  "EU (Paris) Region",
+				Help:  "EU (Paris) Region.",
 			}, {
 				Value: "eu-north-1",
-				Help:  "EU (Stockholm) Region",
+				Help:  "EU (Stockholm) Region.",
 			}, {
 				Value: "eu-south-1",
-				Help:  "EU (Milan) Region",
+				Help:  "EU (Milan) Region.",
 			}, {
 				Value: "EU",
-				Help:  "EU Region",
+				Help:  "EU Region.",
 			}, {
 				Value: "ap-southeast-1",
-				Help:  "Asia Pacific (Singapore) Region",
+				Help:  "Asia Pacific (Singapore) Region.",
 			}, {
 				Value: "ap-southeast-2",
-				Help:  "Asia Pacific (Sydney) Region",
+				Help:  "Asia Pacific (Sydney) Region.",
 			}, {
 				Value: "ap-northeast-1",
-				Help:  "Asia Pacific (Tokyo) Region",
+				Help:  "Asia Pacific (Tokyo) Region.",
 			}, {
 				Value: "ap-northeast-2",
-				Help:  "Asia Pacific (Seoul) Region",
+				Help:  "Asia Pacific (Seoul) Region.",
 			}, {
 				Value: "ap-northeast-3",
-				Help:  "Asia Pacific (Osaka-Local) Region",
+				Help:  "Asia Pacific (Osaka-Local) Region.",
 			}, {
 				Value: "ap-south-1",
-				Help:  "Asia Pacific (Mumbai) Region",
+				Help:  "Asia Pacific (Mumbai) Region.",
 			}, {
 				Value: "ap-east-1",
-				Help:  "Asia Pacific (Hong Kong) Region",
+				Help:  "Asia Pacific (Hong Kong) Region.",
 			}, {
 				Value: "sa-east-1",
-				Help:  "South America (Sao Paulo) Region",
+				Help:  "South America (Sao Paulo) Region.",
 			}, {
 				Value: "me-south-1",
-				Help:  "Middle East (Bahrain) Region",
+				Help:  "Middle East (Bahrain) Region.",
 			}, {
 				Value: "af-south-1",
-				Help:  "Africa (Cape Town) Region",
+				Help:  "Africa (Cape Town) Region.",
 			}, {
 				Value: "cn-north-1",
 				Help:  "China (Beijing) Region",
 			}, {
 				Value: "cn-northwest-1",
-				Help:  "China (Ningxia) Region",
+				Help:  "China (Ningxia) Region.",
 			}, {
 				Value: "us-gov-east-1",
-				Help:  "AWS GovCloud (US-East) Region",
+				Help:  "AWS GovCloud (US-East) Region.",
 			}, {
 				Value: "us-gov-west-1",
-				Help:  "AWS GovCloud (US) Region",
+				Help:  "AWS GovCloud (US) Region.",
 			}},
 		}, {
 			Name:     "location_constraint",
-			Help:     "Location constraint - must match endpoint.\n\nUsed when creating buckets only.",
-			Provider: "ChinaMobile",
-			Examples: []fs.OptionExample{{
-				Value: "wuxi1",
-				Help:  "East China (Suzhou)",
-			}, {
-				Value: "jinan1",
-				Help:  "East China (Jinan)",
-			}, {
-				Value: "ningbo1",
-				Help:  "East China (Hangzhou)",
-			}, {
-				Value: "shanghai1",
-				Help:  "East China (Shanghai-1)",
-			}, {
-				Value: "zhengzhou1",
-				Help:  "Central China (Zhengzhou)",
-			}, {
-				Value: "hunan1",
-				Help:  "Central China (Changsha-1)",
-			}, {
-				Value: "zhuzhou1",
-				Help:  "Central China (Changsha-2)",
-			}, {
-				Value: "guangzhou1",
-				Help:  "South China (Guangzhou-2)",
-			}, {
-				Value: "dongguan1",
-				Help:  "South China (Guangzhou-3)",
-			}, {
-				Value: "beijing1",
-				Help:  "North China (Beijing-1)",
-			}, {
-				Value: "beijing2",
-				Help:  "North China (Beijing-2)",
-			}, {
-				Value: "beijing4",
-				Help:  "North China (Beijing-3)",
-			}, {
-				Value: "huhehaote1",
-				Help:  "North China (Huhehaote)",
-			}, {
-				Value: "chengdu1",
-				Help:  "Southwest China (Chengdu)",
-			}, {
-				Value: "chongqing1",
-				Help:  "Southwest China (Chongqing)",
-			}, {
-				Value: "guiyang1",
-				Help:  "Southwest China (Guiyang)",
-			}, {
-				Value: "xian1",
-				Help:  "Nouthwest China (Xian)",
-			}, {
-				Value: "yunnan",
-				Help:  "Yunnan China (Kunming)",
-			}, {
-				Value: "yunnan2",
-				Help:  "Yunnan China (Kunming-2)",
-			}, {
-				Value: "tianjin1",
-				Help:  "Tianjin China (Tianjin)",
-			}, {
-				Value: "jilin1",
-				Help:  "Jilin China (Changchun)",
-			}, {
-				Value: "hubei1",
-				Help:  "Hubei China (Xiangyan)",
-			}, {
-				Value: "jiangxi1",
-				Help:  "Jiangxi China (Nanchang)",
-			}, {
-				Value: "gansu1",
-				Help:  "Gansu China (Lanzhou)",
-			}, {
-				Value: "shanxi1",
-				Help:  "Shanxi China (Taiyuan)",
-			}, {
-				Value: "liaoning1",
-				Help:  "Liaoning China (Shenyang)",
-			}, {
-				Value: "hebei1",
-				Help:  "Hebei China (Shijiazhuang)",
-			}, {
-				Value: "fujian1",
-				Help:  "Fujian China (Xiamen)",
-			}, {
-				Value: "guangxi1",
-				Help:  "Guangxi China (Nanning)",
-			}, {
-				Value: "anhui1",
-				Help:  "Anhui China (Huainan)",
-			}},
-		}, {
-			Name:     "location_constraint",
-			Help:     "Location constraint - must match endpoint when using IBM Cloud Public.\n\nFor on-prem COS, do not make a selection from this list, hit enter.",
+			Help:     "Location constraint - must match endpoint when using IBM Cloud Public.\nFor on-prem COS, do not make a selection from this list, hit enter",
 			Provider: "IBMCOS",
 			Examples: []fs.OptionExample{{
 				Value: "us-standard",
@@ -1177,70 +845,8 @@
 			}},
 		}, {
 			Name:     "location_constraint",
-			Help:     "Location constraint - the location where your bucket will be located and your data stored.\n",
-			Provider: "RackCorp",
-			Examples: []fs.OptionExample{{
-				Value: "global",
-				Help:  "Global CDN Region",
-			}, {
-				Value: "au",
-				Help:  "Australia (All locations)",
-			}, {
-				Value: "au-nsw",
-				Help:  "NSW (Australia) Region",
-			}, {
-				Value: "au-qld",
-				Help:  "QLD (Australia) Region",
-			}, {
-				Value: "au-vic",
-				Help:  "VIC (Australia) Region",
-			}, {
-				Value: "au-wa",
-				Help:  "Perth (Australia) Region",
-			}, {
-				Value: "ph",
-				Help:  "Manila (Philippines) Region",
-			}, {
-				Value: "th",
-				Help:  "Bangkok (Thailand) Region",
-			}, {
-				Value: "hk",
-				Help:  "HK (Hong Kong) Region",
-			}, {
-				Value: "mn",
-				Help:  "Ulaanbaatar (Mongolia) Region",
-			}, {
-				Value: "kg",
-				Help:  "Bishkek (Kyrgyzstan) Region",
-			}, {
-				Value: "id",
-				Help:  "Jakarta (Indonesia) Region",
-			}, {
-				Value: "jp",
-				Help:  "Tokyo (Japan) Region",
-			}, {
-				Value: "sg",
-				Help:  "SG (Singapore) Region",
-			}, {
-				Value: "de",
-				Help:  "Frankfurt (Germany) Region",
-			}, {
-				Value: "us",
-				Help:  "USA (AnyCast) Region",
-			}, {
-				Value: "us-east-1",
-				Help:  "New York (USA) Region",
-			}, {
-				Value: "us-west-1",
-				Help:  "Freemont (USA) Region",
-			}, {
-				Value: "nz",
-				Help:  "Auckland (New Zealand) Region",
-			}},
-		}, {
-			Name:     "location_constraint",
-			Help:     "Location constraint - must be set to match the Region.\n\nLeave blank if not sure. Used when creating buckets only.",
-			Provider: "!AWS,IBMCOS,Alibaba,ChinaMobile,RackCorp,Scaleway,StackPath,Storj,TencentCOS",
+			Help:     "Location constraint - must be set to match the Region.\nLeave blank if not sure. Used when creating buckets only.",
+			Provider: "!AWS,IBMCOS,Alibaba,Scaleway,StackPath,TencentCOS",
 		}, {
 			Name: "acl",
 			Help: `Canned ACL used when creating buckets and storing or copying objects.
@@ -1251,50 +857,49 @@
 
 Note that this ACL is applied when server-side copying objects as S3
 doesn't copy the ACL from the source but rather writes a fresh one.`,
-			Provider: "!Storj",
 			Examples: []fs.OptionExample{{
 				Value:    "default",
-				Help:     "Owner gets Full_CONTROL.\nNo one else has access rights (default).",
+				Help:     "Owner gets Full_CONTROL. No one else has access rights (default).",
 				Provider: "TencentCOS",
 			}, {
 				Value:    "private",
-				Help:     "Owner gets FULL_CONTROL.\nNo one else has access rights (default).",
+				Help:     "Owner gets FULL_CONTROL. No one else has access rights (default).",
 				Provider: "!IBMCOS,TencentCOS",
 			}, {
 				Value:    "public-read",
-				Help:     "Owner gets FULL_CONTROL.\nThe AllUsers group gets READ access.",
+				Help:     "Owner gets FULL_CONTROL. The AllUsers group gets READ access.",
 				Provider: "!IBMCOS",
 			}, {
 				Value:    "public-read-write",
-				Help:     "Owner gets FULL_CONTROL.\nThe AllUsers group gets READ and WRITE access.\nGranting this on a bucket is generally not recommended.",
+				Help:     "Owner gets FULL_CONTROL. The AllUsers group gets READ and WRITE access.\nGranting this on a bucket is generally not recommended.",
 				Provider: "!IBMCOS",
 			}, {
 				Value:    "authenticated-read",
-				Help:     "Owner gets FULL_CONTROL.\nThe AuthenticatedUsers group gets READ access.",
+				Help:     "Owner gets FULL_CONTROL. The AuthenticatedUsers group gets READ access.",
 				Provider: "!IBMCOS",
 			}, {
 				Value:    "bucket-owner-read",
-				Help:     "Object owner gets FULL_CONTROL.\nBucket owner gets READ access.\nIf you specify this canned ACL when creating a bucket, Amazon S3 ignores it.",
-				Provider: "!IBMCOS,ChinaMobile",
+				Help:     "Object owner gets FULL_CONTROL. Bucket owner gets READ access.\nIf you specify this canned ACL when creating a bucket, Amazon S3 ignores it.",
+				Provider: "!IBMCOS",
 			}, {
 				Value:    "bucket-owner-full-control",
 				Help:     "Both the object owner and the bucket owner get FULL_CONTROL over the object.\nIf you specify this canned ACL when creating a bucket, Amazon S3 ignores it.",
-				Provider: "!IBMCOS,ChinaMobile",
+				Provider: "!IBMCOS",
 			}, {
 				Value:    "private",
-				Help:     "Owner gets FULL_CONTROL.\nNo one else has access rights (default).\nThis acl is available on IBM Cloud (Infra), IBM Cloud (Storage), On-Premise COS.",
+				Help:     "Owner gets FULL_CONTROL. No one else has access rights (default). This acl is available on IBM Cloud (Infra), IBM Cloud (Storage), On-Premise COS",
 				Provider: "IBMCOS",
 			}, {
 				Value:    "public-read",
-				Help:     "Owner gets FULL_CONTROL.\nThe AllUsers group gets READ access.\nThis acl is available on IBM Cloud (Infra), IBM Cloud (Storage), On-Premise IBM COS.",
+				Help:     "Owner gets FULL_CONTROL. The AllUsers group gets READ access. This acl is available on IBM Cloud (Infra), IBM Cloud (Storage), On-Premise IBM COS",
 				Provider: "IBMCOS",
 			}, {
 				Value:    "public-read-write",
-				Help:     "Owner gets FULL_CONTROL.\nThe AllUsers group gets READ and WRITE access.\nThis acl is available on IBM Cloud (Infra), On-Premise IBM COS.",
+				Help:     "Owner gets FULL_CONTROL. The AllUsers group gets READ and WRITE access. This acl is available on IBM Cloud (Infra), On-Premise IBM COS",
 				Provider: "IBMCOS",
 			}, {
 				Value:    "authenticated-read",
-				Help:     "Owner gets FULL_CONTROL.\nThe AuthenticatedUsers group gets READ access.\nNot supported on Buckets.\nThis acl is available on IBM Cloud (Infra) and On-Premise IBM COS.",
+				Help:     "Owner gets FULL_CONTROL. The AuthenticatedUsers group gets READ access. Not supported on Buckets. This acl is available on IBM Cloud (Infra) and On-Premise IBM COS",
 				Provider: "IBMCOS",
 			}},
 		}, {
@@ -1308,16 +913,16 @@
 			Advanced: true,
 			Examples: []fs.OptionExample{{
 				Value: "private",
-				Help:  "Owner gets FULL_CONTROL.\nNo one else has access rights (default).",
+				Help:  "Owner gets FULL_CONTROL. No one else has access rights (default).",
 			}, {
 				Value: "public-read",
-				Help:  "Owner gets FULL_CONTROL.\nThe AllUsers group gets READ access.",
+				Help:  "Owner gets FULL_CONTROL. The AllUsers group gets READ access.",
 			}, {
 				Value: "public-read-write",
-				Help:  "Owner gets FULL_CONTROL.\nThe AllUsers group gets READ and WRITE access.\nGranting this on a bucket is generally not recommended.",
+				Help:  "Owner gets FULL_CONTROL. The AllUsers group gets READ and WRITE access.\nGranting this on a bucket is generally not recommended.",
 			}, {
 				Value: "authenticated-read",
-				Help:  "Owner gets FULL_CONTROL.\nThe AuthenticatedUsers group gets READ access.",
+				Help:  "Owner gets FULL_CONTROL. The AuthenticatedUsers group gets READ access.",
 			}},
 		}, {
 			Name:     "requester_pays",
@@ -1328,7 +933,7 @@
 		}, {
 			Name:     "server_side_encryption",
 			Help:     "The server-side encryption algorithm used when storing this object in S3.",
-			Provider: "AWS,Ceph,ChinaMobile,Minio",
+			Provider: "AWS,Ceph,Minio",
 			Examples: []fs.OptionExample{{
 				Value: "",
 				Help:  "None",
@@ -1336,14 +941,13 @@
 				Value: "AES256",
 				Help:  "AES256",
 			}, {
-				Value:    "aws:kms",
-				Help:     "aws:kms",
-				Provider: "!ChinaMobile",
+				Value: "aws:kms",
+				Help:  "aws:kms",
 			}},
 		}, {
 			Name:     "sse_customer_algorithm",
 			Help:     "If using SSE-C, the server-side encryption algorithm used when storing this object in S3.",
-			Provider: "AWS,Ceph,ChinaMobile,Minio",
+			Provider: "AWS,Ceph,Minio",
 			Advanced: true,
 			Examples: []fs.OptionExample{{
 				Value: "",
@@ -1366,7 +970,7 @@
 		}, {
 			Name:     "sse_customer_key",
 			Help:     "If using SSE-C you must provide the secret encryption key used to encrypt/decrypt your data.",
-			Provider: "AWS,Ceph,ChinaMobile,Minio",
+			Provider: "AWS,Ceph,Minio",
 			Advanced: true,
 			Examples: []fs.OptionExample{{
 				Value: "",
@@ -1378,7 +982,7 @@
 
 If you leave it blank, this is calculated automatically from the sse_customer_key provided.
 `,
-			Provider: "AWS,Ceph,ChinaMobile,Minio",
+			Provider: "AWS,Ceph,Minio",
 			Advanced: true,
 			Examples: []fs.OptionExample{{
 				Value: "",
@@ -1412,9 +1016,6 @@
 			}, {
 				Value: "INTELLIGENT_TIERING",
 				Help:  "Intelligent-Tiering storage class",
-			}, {
-				Value: "GLACIER_IR",
-				Help:  "Glacier Instant Retrieval storage class",
 			}},
 		}, {
 			// Mapping from here: https://www.alibabacloud.com/help/doc-detail/64919.htm
@@ -1429,28 +1030,10 @@
 				Help:  "Standard storage class",
 			}, {
 				Value: "GLACIER",
-				Help:  "Archive storage mode",
+				Help:  "Archive storage mode.",
 			}, {
 				Value: "STANDARD_IA",
-				Help:  "Infrequent access storage mode",
-			}},
-		}, {
-			// Mapping from here: https://ecloud.10086.cn/op-help-center/doc/article/24495
-			Name:     "storage_class",
-			Help:     "The storage class to use when storing new objects in ChinaMobile.",
-			Provider: "ChinaMobile",
-			Examples: []fs.OptionExample{{
-				Value: "",
-				Help:  "Default",
-			}, {
-				Value: "STANDARD",
-				Help:  "Standard storage class",
-			}, {
-				Value: "GLACIER",
-				Help:  "Archive storage mode",
-			}, {
-				Value: "STANDARD_IA",
-				Help:  "Infrequent access storage mode",
+				Help:  "Infrequent access storage mode.",
 			}},
 		}, {
 			// Mapping from here: https://intl.cloud.tencent.com/document/product/436/30925
@@ -1465,10 +1048,10 @@
 				Help:  "Standard storage class",
 			}, {
 				Value: "ARCHIVE",
-				Help:  "Archive storage mode",
+				Help:  "Archive storage mode.",
 			}, {
 				Value: "STANDARD_IA",
-				Help:  "Infrequent access storage mode",
+				Help:  "Infrequent access storage mode.",
 			}},
 		}, {
 			// Mapping from here: https://www.scaleway.com/en/docs/object-storage-glacier/#-Scaleway-Storage-Classes
@@ -1477,17 +1060,17 @@
 			Provider: "Scaleway",
 			Examples: []fs.OptionExample{{
 				Value: "",
-				Help:  "Default.",
+				Help:  "Default",
 			}, {
 				Value: "STANDARD",
-				Help:  "The Standard class for any upload.\nSuitable for on-demand content like streaming or CDN.",
+				Help:  "The Standard class for any upload; suitable for on-demand content like streaming or CDN.",
 			}, {
 				Value: "GLACIER",
-				Help:  "Archived storage.\nPrices are lower, but it needs to be restored first to be accessed.",
+				Help:  "Archived storage; prices are lower, but it needs to be restored first to be accessed.",
 			}},
 		}, {
 			Name: "upload_cutoff",
-			Help: `Cutoff for switching to chunked upload.
+			Help: `Cutoff for switching to chunked upload
 
 Any files larger than this will be uploaded in chunks of chunk_size.
 The minimum is 0 and the maximum is 5 GiB.`,
@@ -1535,7 +1118,7 @@
 			Advanced: true,
 		}, {
 			Name: "copy_cutoff",
-			Help: `Cutoff for switching to multipart copy.
+			Help: `Cutoff for switching to multipart copy
 
 Any files larger than this that need to be server-side copied will be
 copied in chunks of this size.
@@ -1545,7 +1128,7 @@
 			Advanced: true,
 		}, {
 			Name: "disable_checksum",
-			Help: `Don't store MD5 checksum with object metadata.
+			Help: `Don't store MD5 checksum with object metadata
 
 Normally rclone will calculate the MD5 checksum of the input before
 uploading it so it can add it to metadata on the object. This is great
@@ -1555,7 +1138,7 @@
 			Advanced: true,
 		}, {
 			Name: "shared_credentials_file",
-			Help: `Path to the shared credentials file.
+			Help: `Path to the shared credentials file
 
 If env_auth = true then rclone can use a shared credentials file.
 
@@ -1569,7 +1152,7 @@
 			Advanced: true,
 		}, {
 			Name: "profile",
-			Help: `Profile to use in the shared credentials file.
+			Help: `Profile to use in the shared credentials file
 
 If env_auth = true then rclone can use a shared credentials file. This
 variable controls which profile is used in that file.
@@ -1580,7 +1163,7 @@
 			Advanced: true,
 		}, {
 			Name:     "session_token",
-			Help:     "An AWS session token.",
+			Help:     "An AWS session token",
 			Advanced: true,
 		}, {
 			Name: "upload_concurrency",
@@ -1649,36 +1232,8 @@
 			Default:  1000,
 			Advanced: true,
 		}, {
-			Name: "list_version",
-			Help: `Version of ListObjects to use: 1,2 or 0 for auto.
-
-When S3 originally launched it only provided the ListObjects call to
-enumerate objects in a bucket.
-
-However in May 2016 the ListObjectsV2 call was introduced. This is
-much higher performance and should be used if at all possible.
-
-If set to the default, 0, rclone will guess according to the provider
-set which list objects method to call. If it guesses wrong, then it
-may be set manually here.
-`,
-			Default:  0,
-			Advanced: true,
-		}, {
-			Name: "list_url_encode",
-			Help: `Whether to url encode listings: true/false/unset
-
-Some providers support URL encoding listings and where this is
-available this is more reliable when using control characters in file
-names. If this is set to unset (the default) then rclone will choose
-according to the provider setting what to apply, but you can override
-rclone's choice here.
-`,
-			Default:  fs.Tristate{},
-			Advanced: true,
-		}, {
 			Name: "no_check_bucket",
-			Help: `If set, don't attempt to check the bucket exists or create it.
+			Help: `If set, don't attempt to check the bucket exists or create it
 
 This can be useful when trying to minimise the number of transactions
 rclone does if you know the bucket exists already.
@@ -1691,7 +1246,7 @@
 			Advanced: true,
 		}, {
 			Name: "no_head",
-			Help: `If set, don't HEAD uploaded objects to check integrity.
+			Help: `If set, don't HEAD uploaded objects to check integrity
 
 This can be useful when trying to minimise the number of transactions
 rclone does.
@@ -1724,7 +1279,7 @@
 			Advanced: true,
 		}, {
 			Name:     "no_head_object",
-			Help:     `If set, do not do HEAD before GET when getting objects.`,
+			Help:     `If set, don't HEAD objects`,
 			Default:  false,
 			Advanced: true,
 		}, {
@@ -1749,7 +1304,6 @@
 			Default:  memoryPoolFlushTime,
 			Advanced: true,
 			Help: `How often internal memory buffer pools will be flushed.
-
 Uploads which requires additional buffers (f.e multipart) will use memory pool for allocations.
 This option controls how often unused buffers will be removed from the pool.`,
 		}, {
@@ -1761,7 +1315,7 @@
 			Name:     "disable_http2",
 			Default:  false,
 			Advanced: true,
-			Help: `Disable usage of http2 for S3 backends.
+			Help: `Disable usage of http2 for S3 backends
 
 There is currently an unsolved issue with the s3 (specifically minio) backend
 and HTTP/2.  HTTP/2 is enabled by default for the s3 backend but can be
@@ -1770,20 +1324,6 @@
 See: https://github.com/rclone/rclone/issues/4673, https://github.com/rclone/rclone/issues/3631
 
 `,
-		}, {
-			Name: "download_url",
-			Help: `Custom endpoint for downloads.
-This is usually set to a CloudFront CDN URL as AWS S3 offers
-cheaper egress for data downloaded through the CloudFront network.`,
-			Advanced: true,
-		}, {
-			Name: "use_multipart_etag",
-			Help: `Whether to use ETag in multipart uploads for verification
-
-This should be true, false or left unset to use the default for the provider.
-`,
-			Default:  fs.Tristate{},
-			Advanced: true,
 		},
 		}})
 }
@@ -1809,7 +1349,10 @@
 // Options defines the configuration for this backend
 type Options struct {
 	Provider              string               `config:"provider"`
+	RoleName              string               `config:"role_name"`
 	EnvAuth               bool                 `config:"env_auth"`
+	Account               string               `config:"account"`    // Add account option
+	UseOidcAgent          bool                 `config:"oidc_agent"` // Add oidc-agent option
 	AccessKeyID           string               `config:"access_key_id"`
 	SecretAccessKey       string               `config:"secret_access_key"`
 	Region                string               `config:"region"`
@@ -1838,8 +1381,6 @@
 	UseAccelerateEndpoint bool                 `config:"use_accelerate_endpoint"`
 	LeavePartsOnError     bool                 `config:"leave_parts_on_error"`
 	ListChunk             int64                `config:"list_chunk"`
-	ListVersion           int                  `config:"list_version"`
-	ListURLEncode         fs.Tristate          `config:"list_url_encode"`
 	NoCheckBucket         bool                 `config:"no_check_bucket"`
 	NoHead                bool                 `config:"no_head"`
 	NoHeadObject          bool                 `config:"no_head_object"`
@@ -1847,8 +1388,6 @@
 	MemoryPoolFlushTime   fs.Duration          `config:"memory_pool_flush_time"`
 	MemoryPoolUseMmap     bool                 `config:"memory_pool_use_mmap"`
 	DisableHTTP2          bool                 `config:"disable_http2"`
-	DownloadURL           string               `config:"download_url"`
-	UseMultipartEtag      fs.Tristate          `config:"use_multipart_etag"`
 }
 
 // Fs represents a remote s3 server
@@ -1866,7 +1405,6 @@
 	cache         *bucket.Cache    // cache for bucket creation status
 	pacer         *fs.Pacer        // To pace the API calls
 	srv           *http.Client     // a plain http client
-	srvRest       *rest.Client     // the rest connection to the server
 	pool          *pool.Pool       // memory pool
 	etagIsNotMD5  bool             // if set ETags are not MD5s
 }
@@ -1993,7 +1531,6 @@
 
 // s3Connection makes a connection to s3
 func s3Connection(ctx context.Context, opt *Options, client *http.Client) (*s3.S3, *session.Session, error) {
-	ci := fs.GetConfig(ctx)
 	// Make the auth
 	v := credentials.Value{
 		AccessKeyID:     opt.AccessKeyID,
@@ -2001,7 +1538,20 @@
 		SessionToken:    opt.SessionToken,
 	}
 
-	lowTimeoutClient := &http.Client{Timeout: 1 * time.Second} // low timeout to ec2 metadata service
+	cfg := &tls.Config{
+		//ClientCAs: caCertPool,
+		InsecureSkipVerify: true,
+	}
+	//cfg.BuildNameToCertificate()
+
+	tr := &http.Transport{
+		TLSClientConfig: cfg,
+	}
+
+	lowTimeoutClient := &http.Client{
+		Transport: tr,
+		Timeout:   1 * time.Second,
+	} // low timeout to ec2 metadata service
 
 	def := defaults.Get()
 	def.Config.HTTPClient = lowTimeoutClient
@@ -2009,11 +1559,19 @@
 	// start a new AWS session
 	awsSession, err := session.NewSession()
 	if err != nil {
-		return nil, nil, fmt.Errorf("NewSession: %w", err)
+		return nil, nil, errors.Wrap(err, "NewSession")
 	}
 
 	// first provider to supply a credential set "wins"
 	providers := []credentials.Provider{
+		&IAMProvider{
+			stsEndpoint:  opt.Endpoint,
+			RoleName:     opt.RoleName,
+			accountname:  opt.Account,
+			useOidcAgent: opt.UseOidcAgent,
+			httpClient:   def.Config.HTTPClient,
+		},
+
 		// use static credentials if they're present (checked by provider)
 		&credentials.StaticProvider{Value: v},
 
@@ -2040,14 +1598,14 @@
 			ExpiryWindow: 3 * time.Minute,
 		},
 	}
-	cred := credentials.NewChainCredentials(providers)
+	cred := credentials.NewChainCredentials(providers[0:1]) // Enable only IAM
 
 	switch {
 	case opt.EnvAuth:
 		// No need for empty checks if "env_auth" is true
 	case v.AccessKeyID == "" && v.SecretAccessKey == "":
 		// if no access key/secret and iam is explicitly disabled then fall back to anon interaction
-		cred = credentials.AnonymousCredentials
+		// cred = credentials.AnonymousCredentials // Disable anonymous credentials
 	case v.AccessKeyID == "":
 		return nil, nil, errors.New("access_key_id not found")
 	case v.SecretAccessKey == "":
@@ -2057,11 +1615,16 @@
 	if opt.Region == "" {
 		opt.Region = "us-east-1"
 	}
-	setQuirks(opt)
+	if opt.Provider == "AWS" || opt.Provider == "Alibaba" || opt.Provider == "Netease" || opt.Provider == "Scaleway" || opt.Provider == "TencentCOS" || opt.UseAccelerateEndpoint {
+		opt.ForcePathStyle = false
+	}
+	if opt.Provider == "Scaleway" && opt.MaxUploadParts > 1000 {
+		opt.MaxUploadParts = 1000
+	}
 	awsConfig := aws.NewConfig().
-		WithMaxRetries(ci.LowLevelRetries).
+		WithMaxRetries(0). // Rely on rclone's retry logic
 		WithCredentials(cred).
-		WithHTTPClient(client).
+		WithHTTPClient(getClient(ctx, opt)).
 		WithS3ForcePathStyle(opt.ForcePathStyle).
 		WithS3UseAccelerate(opt.UseAccelerateEndpoint).
 		WithS3UsEast1RegionalEndpoint(endpoints.RegionalS3UsEast1Endpoint)
@@ -2081,11 +1644,7 @@
 		// Enable loading config options from ~/.aws/config (selected by AWS_PROFILE env)
 		awsSessionOpts.SharedConfigState = session.SharedConfigEnable
 		// Set the name of the profile if supplied
-		awsSessionOpts.Profile = opt.Profile
-		// Set the shared config file if supplied
-		if opt.SharedCredentialsFile != "" {
-			awsSessionOpts.SharedConfigFiles = []string{opt.SharedCredentialsFile}
-		}
+		// awsSessionOpts.Profile = opt.Profile
 		// The session constructor (aws/session/mergeConfigSrcs) will only use the user's preferred credential source
 		// (from the shared config file) if the passed-in Options.Config.Credentials is nil.
 		awsSessionOpts.Config.Credentials = nil
@@ -2113,7 +1672,7 @@
 
 func checkUploadChunkSize(cs fs.SizeSuffix) error {
 	if cs < minChunkSize {
-		return fmt.Errorf("%s is less than %s", cs, minChunkSize)
+		return errors.Errorf("%s is less than %s", cs, minChunkSize)
 	}
 	return nil
 }
@@ -2128,7 +1687,7 @@
 
 func checkUploadCutoff(cs fs.SizeSuffix) error {
 	if cs > maxUploadCutoff {
-		return fmt.Errorf("%s is greater than %s", cs, maxUploadCutoff)
+		return errors.Errorf("%s is greater than %s", cs, maxUploadCutoff)
 	}
 	return nil
 }
@@ -2141,117 +1700,6 @@
 	return
 }
 
-// Set the provider quirks
-//
-// There should be no testing against opt.Provider anywhere in the
-// code except in here to localise the setting of the quirks.
-//
-// These should be differences from AWS S3
-func setQuirks(opt *Options) {
-	var (
-		listObjectsV2     = true
-		virtualHostStyle  = true
-		urlEncodeListings = true
-		useMultipartEtag  = true
-	)
-	switch opt.Provider {
-	case "AWS":
-		// No quirks
-	case "Alibaba":
-		useMultipartEtag = false // Alibaba seems to calculate multipart Etags differently from AWS
-	case "Ceph":
-		listObjectsV2 = false
-		virtualHostStyle = false
-		urlEncodeListings = false
-	case "ChinaMobile":
-		listObjectsV2 = false
-		virtualHostStyle = false
-		urlEncodeListings = false
-	case "DigitalOcean":
-		urlEncodeListings = false
-	case "Dreamhost":
-		urlEncodeListings = false
-	case "IBMCOS":
-		listObjectsV2 = false // untested
-		virtualHostStyle = false
-		urlEncodeListings = false
-		useMultipartEtag = false // untested
-	case "LyveCloud":
-		useMultipartEtag = false // LyveCloud seems to calculate multipart Etags differently from AWS
-	case "Minio":
-		virtualHostStyle = false
-	case "Netease":
-		listObjectsV2 = false // untested
-		urlEncodeListings = false
-		useMultipartEtag = false // untested
-	case "RackCorp":
-		// No quirks
-		useMultipartEtag = false // untested
-	case "Scaleway":
-		// Scaleway can only have 1000 parts in an upload
-		if opt.MaxUploadParts > 1000 {
-			opt.MaxUploadParts = 1000
-		}
-		urlEncodeListings = false
-	case "SeaweedFS":
-		listObjectsV2 = false // untested
-		virtualHostStyle = false
-		urlEncodeListings = false
-		useMultipartEtag = false // untested
-	case "StackPath":
-		listObjectsV2 = false // untested
-		virtualHostStyle = false
-		urlEncodeListings = false
-	case "Storj":
-		// Force chunk size to >= 64 MiB
-		if opt.ChunkSize < 64*fs.Mebi {
-			opt.ChunkSize = 64 * fs.Mebi
-		}
-	case "TencentCOS":
-		listObjectsV2 = false    // untested
-		useMultipartEtag = false // untested
-	case "Wasabi":
-		// No quirks
-	case "Other":
-		listObjectsV2 = false
-		virtualHostStyle = false
-		urlEncodeListings = false
-		useMultipartEtag = false
-	default:
-		fs.Logf("s3", "s3 provider %q not known - please set correctly", opt.Provider)
-		listObjectsV2 = false
-		virtualHostStyle = false
-		urlEncodeListings = false
-		useMultipartEtag = false
-	}
-
-	// Path Style vs Virtual Host style
-	if virtualHostStyle || opt.UseAccelerateEndpoint {
-		opt.ForcePathStyle = false
-	}
-
-	// Set to see if we need to URL encode listings
-	if !opt.ListURLEncode.Valid {
-		opt.ListURLEncode.Valid = true
-		opt.ListURLEncode.Value = urlEncodeListings
-	}
-
-	// Set the correct list version if not manually set
-	if opt.ListVersion == 0 {
-		if listObjectsV2 {
-			opt.ListVersion = 2
-		} else {
-			opt.ListVersion = 1
-		}
-	}
-
-	// Set the correct use multipart Etag for error checking if not manually set
-	if !opt.UseMultipartEtag.Valid {
-		opt.UseMultipartEtag.Valid = true
-		opt.UseMultipartEtag.Value = useMultipartEtag
-	}
-}
-
 // setRoot changes the root of the Fs
 func (f *Fs) setRoot(root string) {
 	f.root = parsePath(root)
@@ -2268,11 +1716,11 @@
 	}
 	err = checkUploadChunkSize(opt.ChunkSize)
 	if err != nil {
-		return nil, fmt.Errorf("s3: chunk size: %w", err)
+		return nil, errors.Wrap(err, "s3: chunk size")
 	}
 	err = checkUploadCutoff(opt.UploadCutoff)
 	if err != nil {
-		return nil, fmt.Errorf("s3: upload cutoff: %w", err)
+		return nil, errors.Wrap(err, "s3: upload cutoff")
 	}
 	if opt.ACL == "" {
 		opt.ACL = "private"
@@ -2292,23 +1740,16 @@
 	}
 
 	ci := fs.GetConfig(ctx)
-	pc := fs.NewPacer(ctx, pacer.NewS3(pacer.MinSleep(minSleep)))
-	// Set pacer retries to 2 (1 try and 1 retry) because we are
-	// relying on SDK retry mechanism, but we allow 2 attempts to
-	// retry directory listings after XMLSyntaxError
-	pc.SetRetries(2)
-
 	f := &Fs{
-		name:    name,
-		opt:     *opt,
-		ci:      ci,
-		ctx:     ctx,
-		c:       c,
-		ses:     ses,
-		pacer:   pc,
-		cache:   bucket.NewCache(),
-		srv:     srv,
-		srvRest: rest.NewClient(fshttp.NewClient(ctx)),
+		name:  name,
+		opt:   *opt,
+		ci:    ci,
+		ctx:   ctx,
+		c:     c,
+		ses:   ses,
+		pacer: fs.NewPacer(ctx, pacer.NewS3(pacer.MinSleep(minSleep))),
+		cache: bucket.NewCache(),
+		srv:   srv,
 		pool: pool.New(
 			time.Duration(opt.MemoryPoolFlushTime),
 			int(opt.ChunkSize),
@@ -2350,11 +1791,6 @@
 		// return an error with an fs which points to the parent
 		return f, fs.ErrorIsFile
 	}
-	if opt.Provider == "Storj" {
-		f.features.Copy = nil
-		f.features.SetTier = false
-		f.features.GetTier = false
-	}
 	// f.listMultipartUploads()
 	return f, nil
 }
@@ -2415,13 +1851,13 @@
 func (f *Fs) updateRegionForBucket(ctx context.Context, bucket string) error {
 	region, err := f.getBucketLocation(ctx, bucket)
 	if err != nil {
-		return fmt.Errorf("reading bucket location failed: %w", err)
+		return errors.Wrap(err, "reading bucket location failed")
 	}
 	if aws.StringValue(f.c.Config.Endpoint) != "" {
-		return fmt.Errorf("can't set region to %q as endpoint is set", region)
+		return errors.Errorf("can't set region to %q as endpoint is set", region)
 	}
 	if aws.StringValue(f.c.Config.Region) == region {
-		return fmt.Errorf("region is already %q - not updating", region)
+		return errors.Errorf("region is already %q - not updating", region)
 	}
 
 	// Make a new session with the new region
@@ -2429,7 +1865,7 @@
 	f.opt.Region = region
 	c, ses, err := s3Connection(f.ctx, &f.opt, f.srv)
 	if err != nil {
-		return fmt.Errorf("creating new session failed: %w", err)
+		return errors.Wrap(err, "creating new session failed")
 	}
 	f.c = c
 	f.ses = ses
@@ -2448,7 +1884,6 @@
 //
 // Set recurse to read sub directories
 func (f *Fs) list(ctx context.Context, bucket, directory, prefix string, addBucket bool, recurse bool, fn listFn) error {
-	v1 := f.opt.ListVersion == 1
 	if prefix != "" {
 		prefix += "/"
 	}
@@ -2459,7 +1894,7 @@
 	if !recurse {
 		delimiter = "/"
 	}
-	var continuationToken, startAfter *string
+	var marker *string
 	// URL encode the listings so we can use control characters in object names
 	// See: https://github.com/aws/aws-sdk-go/issues/1914
 	//
@@ -2475,16 +1910,15 @@
 	//
 	// So we enable only on providers we know supports it properly, all others can retry when a
 	// XML Syntax error is detected.
-	urlEncodeListings := f.opt.ListURLEncode.Value
+	var urlEncodeListings = (f.opt.Provider == "AWS" || f.opt.Provider == "Wasabi" || f.opt.Provider == "Alibaba" || f.opt.Provider == "Minio" || f.opt.Provider == "TencentCOS")
 	for {
 		// FIXME need to implement ALL loop
-		req := s3.ListObjectsV2Input{
-			Bucket:            &bucket,
-			ContinuationToken: continuationToken,
-			Delimiter:         &delimiter,
-			Prefix:            &directory,
-			MaxKeys:           &f.opt.ListChunk,
-			StartAfter:        startAfter,
+		req := s3.ListObjectsInput{
+			Bucket:    &bucket,
+			Delimiter: &delimiter,
+			Prefix:    &directory,
+			MaxKeys:   &f.opt.ListChunk,
+			Marker:    marker,
 		}
 		if urlEncodeListings {
 			req.EncodingType = aws.String(s3.EncodingTypeUrl)
@@ -2492,28 +1926,10 @@
 		if f.opt.RequesterPays {
 			req.RequestPayer = aws.String(s3.RequestPayerRequester)
 		}
-		var resp *s3.ListObjectsV2Output
+		var resp *s3.ListObjectsOutput
 		var err error
 		err = f.pacer.Call(func() (bool, error) {
-			if v1 {
-				// Convert v2 req into v1 req
-				var reqv1 s3.ListObjectsInput
-				structs.SetFrom(&reqv1, &req)
-				reqv1.Marker = continuationToken
-				if startAfter != nil {
-					reqv1.Marker = startAfter
-				}
-				var respv1 *s3.ListObjectsOutput
-				respv1, err = f.c.ListObjectsWithContext(ctx, &reqv1)
-				if err == nil && respv1 != nil {
-					// convert v1 resp into v2 resp
-					resp = new(s3.ListObjectsV2Output)
-					structs.SetFrom(resp, respv1)
-					resp.NextContinuationToken = respv1.NextMarker
-				}
-			} else {
-				resp, err = f.c.ListObjectsV2WithContext(ctx, &req)
-			}
+			resp, err = f.c.ListObjectsWithContext(ctx, &req)
 			if err != nil && !urlEncodeListings {
 				if awsErr, ok := err.(awserr.RequestFailure); ok {
 					if origErr := awsErr.OrigErr(); origErr != nil {
@@ -2611,21 +2027,19 @@
 		if !aws.BoolValue(resp.IsTruncated) {
 			break
 		}
-		// Use NextContinuationToken if set, otherwise use last Key for StartAfter
-		if resp.NextContinuationToken == nil || *resp.NextContinuationToken == "" {
+		// Use NextMarker if set, otherwise use last Key
+		if resp.NextMarker == nil || *resp.NextMarker == "" {
 			if len(resp.Contents) == 0 {
-				return errors.New("s3 protocol error: received listing with IsTruncated set, no NextContinuationToken/NextMarker and no Contents")
+				return errors.New("s3 protocol error: received listing with IsTruncated set, no NextMarker and no Contents")
 			}
-			continuationToken = nil
-			startAfter = resp.Contents[len(resp.Contents)-1].Key
+			marker = resp.Contents[len(resp.Contents)-1].Key
 		} else {
-			continuationToken = resp.NextContinuationToken
-			startAfter = nil
+			marker = resp.NextMarker
 		}
-		if startAfter != nil && urlEncodeListings {
-			*startAfter, err = url.QueryUnescape(*startAfter)
+		if urlEncodeListings {
+			*marker, err = url.QueryUnescape(*marker)
 			if err != nil {
-				return fmt.Errorf("failed to URL decode StartAfter/NextMarker %q: %w", *continuationToken, err)
+				return errors.Wrapf(err, "failed to URL decode NextMarker %q", *marker)
 			}
 		}
 	}
@@ -3211,7 +2625,7 @@
 		if lifetime := opt["lifetime"]; lifetime != "" {
 			ilifetime, err := strconv.ParseInt(lifetime, 10, 64)
 			if err != nil {
-				return nil, fmt.Errorf("bad lifetime: %w", err)
+				return nil, errors.Wrap(err, "bad lifetime")
 			}
 			req.RestoreRequest.Days = &ilifetime
 		}
@@ -3270,7 +2684,7 @@
 		if opt["max-age"] != "" {
 			maxAge, err = fs.ParseDuration(opt["max-age"])
 			if err != nil {
-				return nil, fmt.Errorf("bad max-age: %w", err)
+				return nil, errors.Wrap(err, "bad max-age")
 			}
 		}
 		return nil, f.cleanUp(ctx, maxAge)
@@ -3304,7 +2718,7 @@
 			return f.shouldRetry(ctx, err)
 		})
 		if err != nil {
-			return nil, fmt.Errorf("list multipart uploads bucket %q key %q: %w", bucket, key, err)
+			return nil, errors.Wrapf(err, "list multipart uploads bucket %q key %q", bucket, key)
 		}
 		uploads = append(uploads, resp.Uploads...)
 		if !aws.BoolValue(resp.IsTruncated) {
@@ -3362,7 +2776,7 @@
 				}
 				_, abortErr := f.c.AbortMultipartUpload(&req)
 				if abortErr != nil {
-					err = fmt.Errorf("failed to remove %s: %w", what, abortErr)
+					err = errors.Wrapf(abortErr, "failed to remove %s", what)
 					fs.Errorf(f, "%v", err)
 				}
 			} else {
@@ -3501,17 +2915,22 @@
 	if err != nil {
 		return err
 	}
+	if resp.LastModified == nil {
+		fs.Logf(o, "Failed to read last modified from HEAD: %v", err)
+	}
 	o.setMetaData(resp.ETag, resp.ContentLength, resp.LastModified, resp.Metadata, resp.ContentType, resp.StorageClass)
 	return nil
 }
 
 func (o *Object) setMetaData(etag *string, contentLength *int64, lastModified *time.Time, meta map[string]*string, mimeType *string, storageClass *string) {
+	var size int64
 	// Ignore missing Content-Length assuming it is 0
 	// Some versions of ceph do this due their apache proxies
 	if contentLength != nil {
-		o.bytes = *contentLength
+		size = *contentLength
 	}
 	o.setMD5FromEtag(aws.StringValue(etag))
+	o.bytes = size
 	o.meta = meta
 	if o.meta == nil {
 		o.meta = map[string]*string{}
@@ -3530,7 +2949,6 @@
 	o.storageClass = aws.StringValue(storageClass)
 	if lastModified == nil {
 		o.lastModified = time.Now()
-		fs.Logf(o, "Failed to read last modified")
 	} else {
 		o.lastModified = *lastModified
 	}
@@ -3595,67 +3013,9 @@
 	return true
 }
 
-func (o *Object) downloadFromURL(ctx context.Context, bucketPath string, options ...fs.OpenOption) (in io.ReadCloser, err error) {
-	url := o.fs.opt.DownloadURL + bucketPath
-	var resp *http.Response
-	opts := rest.Opts{
-		Method:  "GET",
-		RootURL: url,
-		Options: options,
-	}
-	err = o.fs.pacer.Call(func() (bool, error) {
-		resp, err = o.fs.srvRest.Call(ctx, &opts)
-		return o.fs.shouldRetry(ctx, err)
-	})
-	if err != nil {
-		return nil, err
-	}
-
-	contentLength := &resp.ContentLength
-	if resp.Header.Get("Content-Range") != "" {
-		var contentRange = resp.Header.Get("Content-Range")
-		slash := strings.IndexRune(contentRange, '/')
-		if slash >= 0 {
-			i, err := strconv.ParseInt(contentRange[slash+1:], 10, 64)
-			if err == nil {
-				contentLength = &i
-			} else {
-				fs.Debugf(o, "Failed to find parse integer from in %q: %v", contentRange, err)
-			}
-		} else {
-			fs.Debugf(o, "Failed to find length in %q", contentRange)
-		}
-	}
-
-	lastModified, err := time.Parse(time.RFC1123, resp.Header.Get("Last-Modified"))
-	if err != nil {
-		fs.Debugf(o, "Failed to parse last modified from string %s, %v", resp.Header.Get("Last-Modified"), err)
-	}
-
-	metaData := make(map[string]*string)
-	for key, value := range resp.Header {
-		if strings.HasPrefix(key, "x-amz-meta") {
-			metaKey := strings.TrimPrefix(key, "x-amz-meta-")
-			metaData[strings.Title(metaKey)] = &value[0]
-		}
-	}
-
-	storageClass := resp.Header.Get("X-Amz-Storage-Class")
-	contentType := resp.Header.Get("Content-Type")
-	etag := resp.Header.Get("Etag")
-
-	o.setMetaData(&etag, contentLength, &lastModified, metaData, &contentType, &storageClass)
-	return resp.Body, err
-}
-
 // Open an object for read
 func (o *Object) Open(ctx context.Context, options ...fs.OpenOption) (in io.ReadCloser, err error) {
 	bucket, bucketPath := o.split()
-
-	if o.fs.opt.DownloadURL != "" {
-		return o.downloadFromURL(ctx, bucketPath, options...)
-	}
-
 	req := s3.GetObjectInput{
 		Bucket: &bucket,
 		Key:    &bucketPath,
@@ -3696,13 +3056,15 @@
 	})
 	if err, ok := err.(awserr.RequestFailure); ok {
 		if err.Code() == "InvalidObjectState" {
-			return nil, fmt.Errorf("Object in GLACIER, restore first: bucket=%q, key=%q", bucket, bucketPath)
+			return nil, errors.Errorf("Object in GLACIER, restore first: bucket=%q, key=%q", bucket, bucketPath)
 		}
 	}
 	if err != nil {
 		return nil, err
 	}
-
+	if resp.LastModified == nil {
+		fs.Logf(o, "Failed to read last modified: %v", err)
+	}
 	// read size from ContentLength or ContentRange
 	size := resp.ContentLength
 	if resp.ContentRange != nil {
@@ -3725,7 +3087,7 @@
 
 var warnStreamUpload sync.Once
 
-func (o *Object) uploadMultipart(ctx context.Context, req *s3.PutObjectInput, size int64, in io.Reader) (etag string, err error) {
+func (o *Object) uploadMultipart(ctx context.Context, req *s3.PutObjectInput, size int64, in io.Reader) (err error) {
 	f := o.fs
 
 	// make concurrency machinery
@@ -3772,7 +3134,7 @@
 		return f.shouldRetry(ctx, err)
 	})
 	if err != nil {
-		return etag, fmt.Errorf("multipart upload failed to initialise: %w", err)
+		return errors.Wrap(err, "multipart upload failed to initialise")
 	}
 	uid := cout.UploadId
 
@@ -3801,21 +3163,8 @@
 		partsMu  sync.Mutex // to protect parts
 		parts    []*s3.CompletedPart
 		off      int64
-		md5sMu   sync.Mutex
-		md5s     []byte
 	)
 
-	addMd5 := func(md5binary *[md5.Size]byte, partNum int64) {
-		md5sMu.Lock()
-		defer md5sMu.Unlock()
-		start := partNum * md5.Size
-		end := start + md5.Size
-		if extend := end - int64(len(md5s)); extend > 0 {
-			md5s = append(md5s, make([]byte, extend)...)
-		}
-		copy(md5s[start:end], (*md5binary)[:])
-	}
-
 	for partNum := int64(1); !finished; partNum++ {
 		// Get a block of memory from the pool and token which limits concurrency.
 		tokens.Get()
@@ -3845,7 +3194,7 @@
 			finished = true
 		} else if err != nil {
 			free()
-			return etag, fmt.Errorf("multipart upload failed to read source: %w", err)
+			return errors.Wrap(err, "multipart upload failed to read source")
 		}
 		buf = buf[:n]
 
@@ -3858,7 +3207,6 @@
 
 			// create checksum of buffer for integrity checking
 			md5sumBinary := md5.Sum(buf)
-			addMd5(&md5sumBinary, partNum-1)
 			md5sum := base64.StdEncoding.EncodeToString(md5sumBinary[:])
 
 			err = f.pacer.Call(func() (bool, error) {
@@ -3893,14 +3241,14 @@
 				return false, nil
 			})
 			if err != nil {
-				return fmt.Errorf("multipart upload failed to upload part: %w", err)
+				return errors.Wrap(err, "multipart upload failed to upload part")
 			}
 			return nil
 		})
 	}
 	err = g.Wait()
 	if err != nil {
-		return etag, err
+		return err
 	}
 
 	// sort the completed parts by part number
@@ -3921,11 +3269,9 @@
 		return f.shouldRetry(ctx, err)
 	})
 	if err != nil {
-		return etag, fmt.Errorf("multipart upload failed to finalise: %w", err)
+		return errors.Wrap(err, "multipart upload failed to finalise")
 	}
-	hashOfHashes := md5.Sum(md5s)
-	etag = fmt.Sprintf("%s-%d", hex.EncodeToString(hashOfHashes[:]), len(parts))
-	return etag, nil
+	return nil
 }
 
 // Update the Object from in with modTime and size
@@ -3951,20 +3297,19 @@
 	//    - so we can add the md5sum in the metadata as metaMD5Hash if using SSE/SSE-C
 	// - for multipart provided checksums aren't disabled
 	//    - so we can add the md5sum in the metadata as metaMD5Hash
-	var md5sumBase64 string
-	var md5sumHex string
+	var md5sum string
 	if !multipart || !o.fs.opt.DisableChecksum {
-		md5sumHex, err = src.Hash(ctx, hash.MD5)
-		if err == nil && matchMd5.MatchString(md5sumHex) {
-			hashBytes, err := hex.DecodeString(md5sumHex)
+		hash, err := src.Hash(ctx, hash.MD5)
+		if err == nil && matchMd5.MatchString(hash) {
+			hashBytes, err := hex.DecodeString(hash)
 			if err == nil {
-				md5sumBase64 = base64.StdEncoding.EncodeToString(hashBytes)
+				md5sum = base64.StdEncoding.EncodeToString(hashBytes)
 				if (multipart || o.fs.etagIsNotMD5) && !o.fs.opt.DisableChecksum {
 					// Set the md5sum as metadata on the object if
 					// - a multipart upload
 					// - the Etag is not an MD5, eg when using SSE/SSE-C
 					// provided checksums aren't disabled
-					metadata[metaMD5Hash] = &md5sumBase64
+					metadata[metaMD5Hash] = &md5sum
 				}
 			}
 		}
@@ -3979,8 +3324,8 @@
 		ContentType: &mimeType,
 		Metadata:    metadata,
 	}
-	if md5sumBase64 != "" {
-		req.ContentMD5 = &md5sumBase64
+	if md5sum != "" {
+		req.ContentMD5 = &md5sum
 	}
 	if o.fs.opt.RequesterPays {
 		req.RequestPayer = aws.String(s3.RequestPayerRequester)
@@ -4034,9 +3379,8 @@
 	}
 
 	var resp *http.Response // response from PUT
-	var wantETag string     // Multipart upload Etag to check
 	if multipart {
-		wantETag, err = o.uploadMultipart(ctx, &req, size, in)
+		err = o.uploadMultipart(ctx, &req, size, in)
 		if err != nil {
 			return err
 		}
@@ -4051,7 +3395,7 @@
 		// PutObject so we'll use this work-around.
 		url, headers, err := putObj.PresignRequest(15 * time.Minute)
 		if err != nil {
-			return fmt.Errorf("s3 upload: sign request: %w", err)
+			return errors.Wrap(err, "s3 upload: sign request")
 		}
 
 		if o.fs.opt.V2Auth && headers == nil {
@@ -4066,7 +3410,7 @@
 		// create the vanilla http request
 		httpReq, err := http.NewRequestWithContext(ctx, "PUT", url, in)
 		if err != nil {
-			return fmt.Errorf("s3 upload: new request: %w", err)
+			return errors.Wrap(err, "s3 upload: new request")
 		}
 
 		// set the headers we signed and the length
@@ -4086,7 +3430,7 @@
 			if resp.StatusCode >= 200 && resp.StatusCode < 299 {
 				return false, nil
 			}
-			err = fmt.Errorf("s3 upload: %s: %s", resp.Status, body)
+			err = errors.Errorf("s3 upload: %s: %s", resp.Status, body)
 			return fserrors.ShouldRetryHTTP(resp, retryErrorCodes), err
 		})
 		if err != nil {
@@ -4098,7 +3442,7 @@
 	// so make up the object as best we can assuming it got
 	// uploaded properly. If size < 0 then we need to do the HEAD.
 	if o.fs.opt.NoHead && size >= 0 {
-		o.md5 = md5sumHex
+		o.md5 = md5sum
 		o.bytes = size
 		o.lastModified = time.Now()
 		o.meta = req.Metadata
@@ -4116,18 +3460,7 @@
 
 	// Read the metadata from the newly created object
 	o.meta = nil // wipe old metadata
-	head, err := o.headObject(ctx)
-	if err != nil {
-		return err
-	}
-	o.setMetaData(head.ETag, head.ContentLength, head.LastModified, head.Metadata, head.ContentType, head.StorageClass)
-	if o.fs.opt.UseMultipartEtag.Value && !o.fs.etagIsNotMD5 && wantETag != "" && head.ETag != nil && *head.ETag != "" {
-		gotETag := strings.Trim(strings.ToLower(*head.ETag), `"`)
-		if wantETag != gotETag {
-			return fmt.Errorf("multipart upload corrupted: Etag differ: expecting %s but got %s", wantETag, gotETag)
-		}
-		fs.Debugf(o, "Multipart upload Etag: %s OK", wantETag)
-	}
+	err = o.readMetaData(ctx)
 	return err
 }
 
